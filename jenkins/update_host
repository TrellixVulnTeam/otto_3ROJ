#!/bin/sh 

#
# Downloads an ISO from a given URL, apply updates on the host and reboot
# Do not run this script on your machine
#
# This script is part of the project Otto
#

# Copyright Â© 2013 Canonical Ltd.
# Author: Jean-baptiste Lallement <jean-baptiste.lallement@canonical.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

RELEASE=$(lsb_release -sc)
RC=0
OTTOCMD="$HOME/bin/otto"
OTTOOPTS="-d"
ARCH=$(dpkg --print-architecture )
ISODIR=$HOME/iso/ubuntu
if [ "$RELEASE" = "$(distro-info -d)" ]; then
    ISONAME=$RELEASE-desktop-${ARCH}.iso
else
    ISONAME=ubuntu-$(lsb_release -sr)-desktop-${ARCH}.iso
fi

usage() {
    # Display usage information
    cat <<EOF
Usage: $(basename $0) BASEURL
This script is intended to be run from Jenkins on a test machine, DO NOT RUN
it on your machine.

This script downloads an Ubuntu Desktop ISO from the given URL for the release
and architecture matching the host system.  Then the system is upgraded and
rebooted.

EOF
    exit 1
}

dl_image() {
    # Download a disk image from a base download URL
    #
    # $1: Base download url (e.g cdimage.ubuntu.com/daily-live/current)

    [ $# -eq 0 ] && return 1
    baseurl=$1
    name=${JOB_NAME:-$(basename $0)}
    isotmp=$(mktemp $(echo $JOB_NAME|tr '/' '_').XXXXXX)
    devrelease=$(distro-info -d)

    src=$baseurl/$ISONAME
    dst=$ISODIR/$ISONAME
    # Do not re-download the same image for stable releases but always
    # download dev release images
    if [ "$devrelease" = "$RELEASE" -o ! -f "$dst" ]; then
        mkdir -p $ISODIR
        echo "Downloading $src to $isotmp"
        wget --progress=dot:mega $src -O $isotmp
        if [ -f "$isotmp" ]; then
            mv $isotmp $dst
        else
            echo "E: $src failed to download!"
            return 1
        fi
    else
        echo "I: Stable release image ($RELEASE) already exists. Skipping download!"
    fi
    return 0
}

update_system() {
    # Installs updates on the system
    # 
    # @return: 0 on success, 1 on failure

    delay=30
    DEBIAN_FRONTEND=noninteractive
    sudo apt-get update
    ret=$?
    [ $ret -gt 0 ] && return $ret

    # On stable releases there is no really need to reboot every day, only on
    # kernel, drivers and few other packages upgrades 
    if apt-get --simulate dist-upgrade | grep ^Inst; then
        sudo apt-get -y dist-upgrade
        ret=$?
        if [ $ret -eq 0 ]; then
            (echo "Reboot in ${delay}s"; sleep $delay; sudo reboot)&
        fi
    else
        echo "I: No packages to upgrade"
    fi

    return $ret
}

container_exists() {
    # Checks that a container with specified name exists
    #
    # $1 : Name of the container
    # @return: 0 if exists 1 otherwise
    if lxc-ls "$1" | grep -qw "$1"; then 
        return 0
    else
        return 1
    fi
}

create_container() {
    # Create a container with name NAME from image IMAGE
    #
    # $1: NAME
    # $2: IMAGE
    #
    # @return: 0 on success 1 on failure
    
    if [ $# -ne 2 ]; then
        echo "E: Invalid number of argument: create_container NAME IMAGE"
        return 1
    fi
    if ! which $OTTOCMD; then
        echo "E: Command '$OTTOCMD' not found. Container will not be created!"
        return 2
    fi
    if [ ! -f "$2" ]; then
        echo "E: File '$2' not found!"
        return 3
    fi
    if container_exists $1; then
        echo "E: Container '$1' already exists, not creating again!"
        return 4
    fi

    echo "I: Creating container '$1' from '$2'"
    lxcroot=/var/lib/lxc/$1/rootfs
    for log in var/log/syslog var/log/upstart/packages.log; do
        sudo tail -F --pid=$$ $lxcroot/$log | mawk -Winteractive -v logfile="$log" '{print logfile":",$0}' &
    done
    sudo -E $OTTOCMD $OTTOOPTS create -D -u $1 $2
    return $?
}
[ $# -eq 0 ] && usage

# Safeguard
echo -n "WARNING: This script will update and reboot your system. You have 10s to press CTRL+C "
for i in $(seq 10); do
    echo -n "."
    sleep 1
done
echo

dl_image "$1/iso/$RELEASE/"
RC=$?

# Only create a new container on successful download or image already up to
# date
if [ $RC -eq 0 ]; then
    LXCNAME=${RELEASE}-${ARCH}-$(date +%Y%m%d-%H%M)
    create_container $LXCNAME $ISODIR/$ISONAME
    RET=$?
    [ $RET -ne 0 ] && RC=$RET
fi

update_system
RET=$?
[ $RET -ne 0 ] && RC=$RET

exit $RC
