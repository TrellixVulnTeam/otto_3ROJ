#!/bin/sh -u

#
# Runner for Otto
#
# This script is a wrapper for otto to run a complete test cycle with setup of
# the environment, start of the container, wait for shutdown and gathering of
# the results
#

# Copyright (C) 2013 Canonical
#
# Authors: Jean-Baptiste Lallement <jean-baptiste.lallement@canonical.com>
#
# This program is free software; you can redistribute it and/or modify it # under
# the terms of the GNU General Public License as published by the Free # Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or # FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more # details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

# General Settings
RC=0  # Main return code
BINDIR=$(dirname $0)
OTTOCMD=$BINDIR/otto
RESULTSDIR=${RESULTSDIR:-/tmp/otto_results.$(date +%s)/}
LXCBASE=/var/lib/lxc/

# Used to copy and customize the testsuite and let the original source tree
# unchanged
TESTTMP=$(mktemp -d /tmp/otto.XXXXXX)

CONTAINER=""
TESTPATH=""
OTTOOPTS=""

#
# These parameters can be overridden in testsuite configuration file or the
# environment
#
TEST_TIMEOUT=${TEST_TIMEOUT:-3600}  # Timeout before considering a test failed
LOGFILES="${LOGFILES:-}"
ARTIFACTS="${ARTIFACTS:-}"
TESTREPOS="${TESTREPOS:-}"
TESTPKGS="${TESTPKGS:-}"
TESTPKGSNODEPS="${TESTPKGSNODEPS:-}"

#
# Error codes
#
# General failures
ENOROOT=1
EFILENOTFOUND=2

# Container errors
ECONTAINERNOTFOUND=20
ECONTAINERRUNNING=21
ECONTAINERSTARTFAILED=22

# Test errors
ETESTNOTFOUND=30
ETESTHOOKFAILED=31
ETESTFAILED=32

usage() {
    msg_as_root=""
    if ! running_as_root; then
        msg_as_root="This script must be run as root
"
    fi
    cat<<EOF
Usage: $(basename $0) [OPTIONS...] NAME TESTPATH
Run testsuite in TESTTREE the specified container NAME
$msg_as_root
    NAME: Name of an existing container.
    TESTPATH: Path to a directory containing the testsuite.

Options:
    -h, --help      This help
    -d, --debug     Enable debug mode

EOF
    exit 1
}

on_exit() {
    # Exit handler

    if container_is_running $CONTAINER; then
        echo -n "I: Stopping container '$CONTAINER'... "
        $OTTOCMD $OTTOOPTS stop $CONTAINER
        lxc-wait -q -n $CONTAINER -s STOPPED -t 60
        if container_is_running $CONTAINER; then
            echo "failed to stop after 60s"
        else
            echo "stopped"
        fi
    fi
    # Cleanup temporary directories
    #[ -d "$TESTTMP" ] && rm -Rf "$TESTTMP"
    exit $RC
}
trap on_exit EXIT INT QUIT ABRT PIPE TERM

running_as_root() {
    # Checks if the script is currently running as root
    #
    # @return: 0 if it is running as root 1 otherwise
    [ $( id -u ) -ne 0 ] && return 1
    return 0
}

container_exists() {
    # Checks that a container with specified name exists
    #
    # $1 : Name of the container
    # @return: 0 if exists 1 otherwise
    if lxc-ls "$1" | grep -qw "$1"; then
        return 0
    else
        return 1
    fi
}

container_is_running() {
    # Checks if a container is running
    #
    # $1 : Name of the container
    # @return: 0 if running 1 otherwise
    [ $# -eq 0 ] && return 1
    lxc-info -n $1 -t RUNNING 2>/dev/null
    return $?
}

start_container() {
    # Starts a container with otto and wait until it runs
    #
    # $1: Name of the container
    # $2: Path to the test directory
    name=$1
    testdir="$2"

    $OTTOCMD $OTTOOPTS start $name --archive -C $testdir
    return $?
}

tail_logs() {
    # Tail log files in -F mode in background
    #
    # $@ List of log files
    for log in $@; do
        tail -n0 -F --pid=$$ $LXCROOT/$log | mawk -Winteractive -v logfile="$log" '{print logfile":",$0}' &
    done
}

collect_results() {
    # Collect result files and copy them to destination path
    #
    # $1: destination directory
    # $@: list of files and directories to collect
    rdest="$1"
    mkdir -p "$rdest"
    shift
    for log in $@; do
        log=$LXCROOT/$log
        if [ -f "$log" ]; then
            cp -a $log "$rdest"
        elif [ -d "$log" ]; then
            rsync -aH $log "$rdest"
        fi
    done

    user=${SUDO_USER:-$USER}
    chown -R $user:$user "$rdest"
}

check_results() {
    # Check if one of the mandatory step failed. There are 2 supported steps at
    # the moment: packages and timeout
    #
    # $1: Path to summary file
    if [ $# -eq 0 ]; then
        echo "W: No summary file provided!"
        return 0
    fi

    summary="$1"
    if [ ! -f "$summary" ]; then
        echo "W: Summary file '$summary' not found!"
        return 1
    fi

    cat "$summary"
    if grep -qw 'ERROR$' "$summary"; then
        echo "E: A run step failed. Check summary.log for details"
        return 1
    fi
    return 0
}
write_file_from_var() {
    # Split an environment variable per words (space delimited) and write it
    # to a file. This is essentially use to create packages and ppas lists
    # from the environment
    #
    # $1: destination file
    # $@: list of values

    dst="$1"
    shift
    mkdir -p $(dirname $dst)
    echo "$@" | tr [:blank:] "\n" > "$dst"
}

run_hook() {
    # Runs a testsuite hook
    #
    # $1: Hook name
    [ $# -eq 0 ] && return
    hook=$TESTHOOKS/$1
    shift

    if [ -x "$hook" ]; then
        echo "I: Executing test hook '$hook'"
        $hook $@
        RET=$?
        if [ $RET -gt 0 ]; then
            echo "E: Hook '$hook' failed with code $RET. Aborting!"
            RC=$ETESTHOOKFAILED
            exit
        fi
    fi
}

SHORTOPTS="hd"
LONGOPTS="help,debug"

TEMP=$(getopt -o $SHORTOPTS --long $LONGOPTS -- "$@")
eval set -- "$TEMP"

exec 2>&1

while true ; do
    case "$1" in
        -h|--help)
            usage;;
        -d|--debug)
            set -x
            OTTOOPTS="$OTTOOPTS -d"
            shift;;
        --) shift;
            break;;
        *) usage;;
    esac
done

CONTAINER="$1"
TESTPATH="$2"

LXCROOT=$LXCBASE/$CONTAINER/run/delta

if ! running_as_root; then
    echo "E: This script must be run as root. Exiting!"
    RC=$ENOROOT
    exit
fi

#
# Container checks
#
if ! container_exists $CONTAINER; then
    echo "E: Container '$CONTAINER' doesn't exists. Exiting!"
    RC=$ECONTAINERNOTFOUND
    exit
fi

if container_is_running $CONTAINER; then
    echo "E: Please stop container '$CONTAINER' before starting run. Exiting!"
    RC=$ECONTAINERRUNNING
    exit
fi

#
# Testsuite Checks
#
if [ ! -d "$TESTPATH" ]; then
    echo "E: Test directory not found. Exiting!"
    RC=$ETESTNOTFOUND
    exit
fi
TP="$(dirname $TESTPATH)/$(basename $TESTPATH)"  # Strip trailing /
rsync -aH $TP $TESTTMP/
TESTPATH="$TESTTMP/$(basename $TESTPATH)"
TESTCONFIG=$TESTPATH/config
TESTHOOKS=$TESTPATH/hooks

# Customize the test suite with additional files
write_file_from_var "$TESTPATH/packages/custom.repo" "$TESTREPOS"
write_file_from_var "$TESTPATH/packages/custom.pkgs" "$TESTPKGS"
write_file_from_var "$TESTPATH/packages/custom.pkgs.nodeps" "$TESTPKGSNODEPS"

if [ -f "$TESTCONFIG" ]; then
    echo "I: Loading test configuration from $TESTCONFIG"
    . $TESTCONFIG
fi

run_hook "setup" $TESTPATH

POSTSTOP_FLAG=$LXCBASE/$CONTAINER/.post-stop.done
rm -f $POSTSTOP_FLAG
if ! start_container $CONTAINER $TESTPATH; then
    echo "E: Container '$CONTAINER' failed to start. Exiting!"
    RC=$ECONTAINERSTARTFAILED
    exit
fi

LOGFILES="/var/log/upstart/otto-setup.log $LOGFILES"
tail_logs $LOGFILES

lxc-wait -q -n $CONTAINER -s STOPPED -t $TEST_TIMEOUT
RET=$?

if [ $RET -gt 0 ]; then
    echo "E: Test failed to run in $TEST_TIMEOUT seconds. Aborting!"
    $OTTOCMD $OTTOOPTS stop $CONTAINER
    echo "timeout: ERROR" >> $LXCROOT/var/local/otto/summary.log
fi
echo "timeout: PASS" >> $LXCROOT/var/local/otto/summary.log

#
# container is already stopped when post-stop hook is executed. A flag is
# created in post-stop.sh hook to avoid a race when the archive is created
#
LOOP=0
while sleep 1; do
    LOOP=$((LOOP + 1)) 
    if [ $LOOP -gt 300 ]; then
        echo "E: No archive file created for this run in less than 5min!"
        break
    fi  
    [ -f "$POSTSTOP_FLAG" ] && break
done

if [ -f "$POSTSTOP_FLAG" ]; then
    ARCHIVE_FILE=$(ls -Art $LXCBASE/$CONTAINER/archive/ | tail -n 1)
    echo "Run archived as $ARCHIVE_FILE"
fi

# We always want this directory
collect_results $RESULTSDIR /var/local/otto/
# Artifacts and logs created by the run
collect_results $RESULTSDIR $ARTIFACTS
collect_results $RESULTSDIR/logs $LOGFILES

echo "I: The following artifacts have been collected:"
(cd $RESULTSDIR; find ./* -type f)
echo

if ! check_results $RESULTSDIR/summary.log; then
    RC=$ETESTFAILED
fi
