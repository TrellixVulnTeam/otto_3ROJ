#!/bin/sh -u

#
# Runner for Otto on phablet
#
# This script is a wrapper for otto to run a complete test cycle with setup of
# the environment, on phablet images, wait for shutdown and gathering of
# the results.
# It is slightly different from otto-run as it doesn't rely on LXC and runs the
# tests directly on hardware with reprovisioning between each run
#

# Copyright (C) 2013 Canonical
#
# Authors: Jean-Baptiste Lallement <jean-baptiste.lallement@canonical.com>
#
# This program is free software; you can redistribute it and/or modify it # under
# the terms of the GNU General Public License as published by the Free # Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or # FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more # details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

# General Settings
RC=0  # Main return code
BINDIR=$(dirname $0)
OTTOCMD=$BINDIR/otto
RESULTSDIR=${RESULTSDIR:-/tmp/otto_results.$(date +%s)/}

# Used to copy and customize the testsuite and let the original source tree
# unchanged
TESTTMP=$(mktemp -d /tmp/otto.XXXXXX)

TESTPATH=""
OTTOOPTS=""

DEVICE_SERIAL="" ## adb devices -l|awk '/usb/ {print $1; exit}'
DEVICE_USER="phablet"
DEVICE_IP="127.0.0.1"
DEVICE_PORT="54322"

#
# These parameters can be overridden in testsuite configuration file or the
# environment
#
TEST_TIMEOUT=${TEST_TIMEOUT:-7200}  # Timeout before considering a test failed
LOGFILES="${LOGFILES:-}"
ARTIFACTS="${ARTIFACTS:-}"
TESTREPOS="${TESTREPOS:-}"
TESTPKGS="${TESTPKGS:-}"
TESTPKGSSTRICT="${TESTPKGSSTRICT:-}"

#
# Error codes
#
# General failures
ENOROOT=1
EFILENOTFOUND=2

# Test errors
ETESTNOTFOUND=30
ETESTHOOKFAILED=31
ETESTFAILED=32

usage() {
    cat<<EOF
Usage: $(basename $0) [OPTIONS...] TESTPATH
Run testsuite in TESTTREE 
    TESTPATH: Path to a directory containing the testsuite.

Options:
    -h, --help      This help
    -d, --debug     Enable debug mode
    -s, --serial    Device Serial number

EOF
    exit 1
}

on_exit() {
    # Exit handler

    # Cleanup temporary directories
    #[ -d "$TESTTMP" ] && rm -Rf "$TESTTMP"
    exit $RC
}
trap on_exit EXIT INT QUIT ABRT PIPE TERM

running_as_root() {
    # Checks if the script is currently running as root
    #
    # @return: 0 if it is running as root 1 otherwise
    [ $( id -u ) -ne 0 ] && return 1
    return 0
}

tail_logs() {
    # Tail log files in -F mode in background
    #
    # $@ List of log files
    for log in $@; do
        tail -n0 -F --pid=$$ $LXCROOT/$log | mawk -Winteractive -v logfile="$log" '{print logfile":",$0}' &
    done
}

collect_results() {
    # Collect result files and copy them to destination path
    #
    # $1: destination directory
    # $@: list of files and directories to collect
    rdest="$1"
    mkdir -p "$rdest"
    shift
    for log in $@; do
        log=$LXCROOT/$log
        if [ -f "$log" ]; then
            cp -a $log "$rdest"
        elif [ -d "$log" ]; then
            rsync -aH $log "$rdest"
        fi
    done

    user=${SUDO_USER:-$USER}
    chown -R $user:$user "$rdest"
}

check_results() {
    # Check if one of the mandatory step failed. There are 2 supported steps at
    # the moment: packages and timeout
    #
    # $1: Path to summary file
    if [ $# -eq 0 ]; then
        echo "W: No summary file provided!"
        return 0
    fi

    summary="$1"
    if [ ! -f "$summary" ]; then
        echo "W: Summary file '$summary' not found!"
        return 1
    fi

    cat "$summary"
    if grep -qw 'ERROR$' "$summary"; then
        echo "E: A run step failed. Check summary.log for details"
        return 1
    fi
    return 0
}

write_file_from_var() {
    # Split an environment variable per words (space delimited) and write it
    # to a file. This is essentially use to create packages and ppas lists
    # from the environment
    #
    # $1: destination file
    # $@: list of values

    dst="$1"
    shift
    mkdir -p $(dirname $dst)
    echo "$@" | tr [:blank:] "\n" > "$dst"
}

run_hook() {
    # Runs a testsuite hook
    #
    # $1: Hook name
    [ $# -eq 0 ] && return
    hook=$TESTHOOKS/$1
    shift

    if [ -x "$hook" ]; then
        echo "I: Executing test hook '$hook'"
        $hook $@
        RET=$?
        if [ $RET -gt 0 ]; then
            echo "E: Hook '$hook' failed with code $RET. Aborting!"
            RC=$ETESTHOOKFAILED
            exit
        fi
    fi
}

# ______________________________________________________________________ #
#
# Generic functions for touch devices
# ______________________________________________________________________ #
get_serialno() {
    # Returns serial ID of the first device on the list
    echo "$(adb get-serialno|head -1)"
}

exec_with_ssh() {
    # Execute a command on a device with ssh
    ssh -o NoHostAuthenticationForLocalhost=yes -t $DEVICE_USER@$DEVICE_IP -p $DEVICE_PORT "bash -ic \"$@\""
}

exec_with_adb() {
    # Execute a command on a device with adb
    adb -s $DEVICE_SERIAL shell /usr/bin/env -i PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin "$@"
}

adb_root() {
    adb -s $DEVICE_SERIAL root
    adb -s $DEVICE_SERIAL wait-for-device
}

setup_adb_forwarding() {
    # Configure IP forwarding over USB
    DEVICE_PORT=$(shuf -i 2000-65000 -n 1 -z)
    adb -s $DEVICE_SERIAL forward tcp:$DEVICE_PORT tcp:22
    #adb -s $DEVICE_SERIAL forward tcp:$TARGET_DEBUG_PORT tcp:$TARGET_DEBUG_PORT
}

clear_adb_forwarding() {
    adb -s $DEVICE_SERIAL forward --remove "tcp:$TARGET_SSH_PORT"
}

# ______________________________________________________________________ #


SHORTOPTS="hds:"
LONGOPTS="help,debug,serial:"

TEMP=$(getopt -o $SHORTOPTS --long $LONGOPTS -- "$@")
eval set -- "$TEMP"

exec 2>&1

while true ; do
    case "$1" in
        -h|--help)
            usage;;
        -d|--debug)
            set -x
            OTTOOPTS="$OTTOOPTS -d"
            shift;;
        -s|--serial)
            DEVICE_SERIAL=$2
            shift 2;;
        --) shift;
            break;;
        *) usage;;
    esac
done

[ $# -eq 0 ] && usage
TESTPATH="$1"
[ -z "$DEVICE_SERIAL" ] && DEVICE_SERIAL="$(get_serialno)"

#
# Testsuite Checks
#
if [ ! -d "$TESTPATH" ]; then
    echo "E: Test directory not found. Exiting!"
    RC=$ETESTNOTFOUND
    exit
fi

TP="$(dirname $TESTPATH)/$(basename $TESTPATH)"  # Strip trailing /
rsync -aH $TP $TESTTMP/
TESTPATH="$TESTTMP/$(basename $TESTPATH)"
TESTCONFIG=$TESTPATH/config
TESTHOOKS=$TESTPATH/hooks

# Customize the test suite with additional files
write_file_from_var "$TESTPATH/packages/custom.repo" "$TESTREPOS"
write_file_from_var "$TESTPATH/packages/custom.pkgs" "$TESTPKGS"
write_file_from_var "$TESTPATH/packages/custom.pkgs.strict" "$TESTPKGSSTRICT"

if [ -f "$TESTCONFIG" ]; then
    echo "I: Loading test configuration from $TESTCONFIG"
    . $TESTCONFIG
fi

run_hook "setup" $TESTPATH

prepare_phablet() {
    # Install the test runner and the testsuite from $1 to the device
    # Then run the script phablet-prepare.sh to prepare the target for the run.
    # In otto these steps are done by LXC hooks pre-start.sh and pre-mount.sh
    # 
    # $1: Path to the directory containing the testsuite to deploy on the device

    if [ $# -ne 1 ]; then
        echo "E: Wrong number of arguments. Path to testsuite is missing, exiting!"
        exit $ETESTNOTFOUND
    fi

    testtmp=$(readlink -f $1)
    testname=$(basename $TESTPATH)
    # Now copy phablet specific bits to temporary location
    GUESTDIR=$BINDIR/../lxc.defaults
    [ -d "$GUESTDIR/guest/" ] && rsync -aH $GUESTDIR/guest/ $testtmp/$testname/target-override/
    if [ -f "$GUESTDIR/scripts/phablet-prepare.sh" ]; then
        cp -a $GUESTDIR/scripts/phablet-prepare.sh $testtmp/
        chmod +x $testtmp/phablet-prepare.sh
    fi

    # Test is ready. Copy TESTTMP to the device
    # Create a tarball of temporaty test directory
    tar czf ${testtmp}.tgz $testtmp/
    # push the tarball
    adb -s $DEVICE_SERIAL push ${testtmp}.tgz /tmp/
    # Untar on the other side
    exec_with_adb tar xmzf tmp/$(basename ${testtmp}).tgz

    # Run phablet-prepare.sh
    exec_with_adb $testtmp/phablet-prepare.sh $testname
}

prepare_phablet $TESTTMP/

exit 0

LOGFILES="/var/log/upstart/otto-setup.log $LOGFILES"
tail_logs $LOGFILES

lxc-wait -q -n $CONTAINER -s STOPPED -t $TEST_TIMEOUT
RET=$?

TIMEOUTRES="PASS"
if [ $RET -gt 0 ]; then
    TIMEOUTRES="ERROR"
    echo "E: Test failed to run in $TEST_TIMEOUT seconds. Aborting!"
    $OTTOCMD $OTTOOPTS stop $CONTAINER
fi
echo "timeout: $TIMEOUTRES" >> $LXCROOT/var/local/otto/summary.log

#
# container is already stopped when post-stop hook is executed. A flag is
# created in post-stop.sh hook to avoid a race when the archive is created
#
LOOP=0
echo "I: Waiting for creation of the archive "
while sleep 10; do
    echo -n "."
    LOOP=$((LOOP + 1)) 
    if [ $LOOP -gt 300 ]; then
        echo " Failed"
        echo "E: No archive file created for this run in less than 5min!"
        break
    fi  
    [ -f "$POSTSTOP_FLAG" ] && break
done
echo

if [ -f "$POSTSTOP_FLAG" ]; then
    ARCHIVE_FILE=$(ls -Art $LXCBASE/$CONTAINER/archive/ | tail -n 1)
    echo "I: Run archived as $ARCHIVE_FILE"
fi

# We always want this directory
collect_results $RESULTSDIR /var/local/otto/
# Artifacts and logs created by the run
collect_results $RESULTSDIR $ARTIFACTS
collect_results $RESULTSDIR/logs $LOGFILES

echo "I: The following artifacts have been collected:"
(cd $RESULTSDIR; find ./* -type f)
echo

if ! check_results $RESULTSDIR/summary.log; then
    RC=$ETESTFAILED
fi
