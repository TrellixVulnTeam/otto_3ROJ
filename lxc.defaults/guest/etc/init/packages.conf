description "Setup automated tests"
author "Jean-Baptiste Lallement <jean-baptiste.lallement@canonical.com>"

start on starting lightdm

env DEBIAN_FRONTEND=noninteractive

pre-start script
    SHUTDOWN_ON_FAILURE=1
    OTTOBASE=/var/local/otto

    # Enable debug more
    exec > $OTTOBASE/packages.debug 2>&1
    set -x
    
    SYSINFODIR=$OTTOBASE/sysinfo/
    SUMMARY=$OTTOBASE/summary.log
    mkdir -p ${SYSINFODIR}

    running_in_container()
    {
      type running-in-container >/dev/null 2>&1 && running-in-container >/dev/null
    }

    exit_job() {
        # Exit the job or shutdown if SHUTDOWN_ON_FAILURE is set
        #
        # $1: Error code
        if [ $# -gt 0 ]; then
            RC=$1
        else
            RC=1
        fi

        [ $RC -gt 0 ] && echo "packages: FAIL" >> $SUMMARY
        if [ -n "$SHUTDOWN_ON_FAILURE" ]; then
            echo "W: Shutdown requested!"
            shutdown -h now
        else
            exit $RC
        fi
    }

    # Do not execute again
    echo "manual" > /etc/init/packages.override

    echo "# List of packages installed on the system at boot time" > ${SYSINFODIR}/dpkg-l.boot
    dpkg -l >> ${SYSINFODIR}/dpkg-l.boot

    # Purge kernel and grub in containers
    if running_in_container; then
        kernels=$(dpkg-query -W -f '${Status}\t${Package}\n' "linux-image-*"| grep "ok installed" | cut -d'	' -f2)
        apt-get autoremove -y --purge $(echo $kernels)
        apt-get autoremove -y --purge grub-common
    fi

    listdir=/var/local/otto
    ppas="$listdir/*.repo"
    pkgs="$listdir/*.pkgs"
    nodeps="$listdir/*.nodeps"

    # Exit directly if un-requested packages are installed
    for pkglist in $(ls $nodeps 2>/dev/null); do
        if ! /usr/local/bin/check-installed $(cat $pkglist); then
            echo "E: Too many packages installed. Exiting"
            exit_job 1
        fi
    done

    # System upgrade
    if [ -n "$DO_UPGRADE" ]; then
        apt-get update
        apt-get -y dist-upgrade
    else
        echo "W: image upgrade is disabled!"
    fi

    # Add PPAs
    for ppalist in $(ls $ppas 2>/dev/null); do
        while read ppa; do
            [ -z "$(echo $ppa | tr -d' ')" ] && continue
            add-apt-repository -y $ppa
            if [ $? -ne 0 ]; then
                echo "E: Failed to add PPA '$ppa'. Exiting!"
                exit_job 1
            fi
        done<$ppalist
    done
    apt-get update

    # Install additional packages
    for pkglist in $(ls $nodeps 2>/dev/null); do
        apt-get install -y --no-install-recommends $(cat $pkglist)
        if [ $? -ne 0 ]; then
            echo "E: Failed to install test packages. Exiting!"
            exit_job 1
        fi
    done

    # Install additional packages
    for pkglist in $(ls $pkgs 2>/dev/null); do
        apt-get install -y $(cat $pkglist)
        if [ $? -ne 0 ]; then
            echo "E: Failed to install packages. Exiting!"
            exit_job 1
        fi
    done

    echo "# List of packages installed after packages installation" > ${SYSINFODIR}/dpkg-l.postsetup
    dpkg -l >> ${SYSINFODIR}/dpkg-l.postsetup

    echo "packages: PASS" >> $SUMMARY
end script
