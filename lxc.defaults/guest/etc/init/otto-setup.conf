description "Setup automated tests"
author "Jean-Baptiste Lallement <jean-baptiste.lallement@canonical.com>"

start on (starting lightdm or
          starting ubuntu-touch-session)

env DEBIAN_FRONTEND=noninteractive

pre-start script
    set +e
    SHUTDOWN_ON_FAILURE=1
    OTTOBASE=/var/local/otto
    UPGRADE=False

    # Enable debug more
    #exec 2>&1
    #set -x

    cat <<EOF
========= $(date '+%F %X') - Starting upstart job otto-setup.conf ========"

                            ___ _____ _____ ___
                           / _ \_   _|_   _/ _ \
                          | | | || |   | || | | |
                          | |_| || |   | || |_| |
                           \___/ |_|   |_| \___/

==============================================================================
EOF

    listdir=$OTTOBASE/config
    ppas="$listdir/*.repo"
    pkgs="$listdir/*.pkgs"
    strict="$listdir/*.strict"

    SYSINFODIR=$OTTOBASE/sysinfo/
    SUMMARY=$OTTOBASE/summary.log
    mkdir -p ${SYSINFODIR}

    running_in_container()
    {
      type running-in-container >/dev/null 2>&1 && running-in-container >/dev/null
    }

    exit_job() {
        # Exit the job or shutdown if SHUTDOWN_ON_FAILURE is set
        #
        # $1: Error code
        if [ $# -gt 0 ]; then
            RC=$1
        else
            RC=1
        fi

        write_package_summary $RC

        if [ $RC -gt 0 -a -n "$SHUTDOWN_ON_FAILURE" ]; then
            echo "W: Shutdown requested!"
            shutdown -h now
        fi
        exit $RC
    }

    install_pkg() {
        for pkglist in $(ls $pkgs 2>/dev/null); do
            apt-get install -y $(cat $pkglist)
            if [ $? -ne 0 ]; then
                echo "E: Failed to install packages. Exiting!"
                exit_job 4
            fi
        done
    }

    write_package_summary() {
        # Write result of package installation to summary file
        if [ $# -eq 0 ]; then
            echo "E: write_package_summary requires an error code"
            return 1
        fi

        if ! grep -q "packages-setup" $SUMMARY >/dev/null 2>&1; then
            res="PASS"
            [ $1 -gt 0 ] && res="ERROR"
            echo "packages-setup (see otto-setup.log for details): $res" >> $SUMMARY
        fi
    }

    # retry command a certain number of time
    # $1 is the number of retry
    # $2 is the delay in second between retries
    # the command is then passed
    retry_cmd() {
        # Tries to execute $@ $loop times with a delay of $delay between retries
        # before aborting
        loop=$1
        delay=$2
        shift
        shift
        set +e
        while [ $loop -gt 0 ]; do
            $@ && break
            loop=$((loop - 1))
            sleep $delay
        done
        set -e
    }


    if [ -r "/.upgrade" ]; then
        UPGRADE=True
        cat <<EOF
            +-----------------------------------+
            |                                   |
            | INITIAL CREATION OF THE CONTAINER |
            |                                   |
            +-----------------------------------+
EOF
    fi

    # Do not execute again if not upgrade
    if [ "$UPGRADE" != "True" ]; then
        echo "manual" > /etc/init/otto-setup.override
    fi

    echo "# List of packages installed on the system at boot time" > ${SYSINFODIR}/dpkg-l.boot
    dpkg -l >> ${SYSINFODIR}/dpkg-l.boot

    # We remove the initrd.img symlink otherwise update-initramfs fails
    # because this file already exists and we do not need it in LXC anyway
    # We also do not care about initramfs in a container
    if running_in_container; then
        rm -f /initrd.img || true
        sed -i "s/\(update_initramfs=\).*/\1no/" /etc/initramfs-tools/update-initramfs.conf
    fi

    retry_cmd 3 30 apt-get update
    # Install eatmydata to speedup packages installation
    if ! dpkg-query -W -f '${Status}\t${Package}\n' "eatmydata"| grep "ok installed" >/dev/null 2>&1; then
        apt-get -y install eatmydata || true
    fi
    [ -f "/usr/lib/libeatmydata/libeatmydata.so" ] && export LD_PRELOAD="${LD_PRELOAD:+$LD_PRELOAD:}/usr/lib/libeatmydata/libeatmydata.so"

    # A bit more speed with deferred commit
    echo "force-unsafe-io" > /etc/dpkg/dpkg.cfg.d/force-unsafe-io

    # System upgrade
    if [ "$UPGRADE" = True ]; then
        apt-get -y dist-upgrade

        # Install additional packages like proprietary drivers
        install_pkg
        rm -f "/.upgrade"
        shutdown -h now
        exit 0
    fi

    # Add PPAs
    for ppalist in $(ls $ppas 2>/dev/null); do
        while read ppa; do
            [ -z "$(echo $ppa | tr -d ' ')" ] && continue
            add-apt-repository -y "$ppa"
            if [ $? -ne 0 ]; then
                echo "E: Failed to add PPA '$ppa'. Exiting!"
                exit_job 2
            fi
        done<$ppalist
    done
    retry_cmd 3 30 apt-get update

    # Exit directly if un-requested packages are installed
    # don't check strict package list dependency if we dist-upgrade with
    # whole ppa (enables transitions like libical0 -> libical 1 in proposed)
    for pkglist in $(ls $strict 2>/dev/null); do
        if ! grep -q "dist-upgrade" $pkglist >/dev/null 2>&1; then
            if ! /usr/local/bin/check-installed $(cat $pkglist); then
                echo "E: Too many packages installed. Exiting"
                exit_job 1
            fi
        fi
    done

    # Strictly install additional packages without any additional dependencies
    #
    # do_dist_upgrade and the fake package 'dist-upgrade' are here to workaround
    # a limitation to install all the packages available from a PPA and be
    # compatible with the existing daily release jobs. This will be replaced by
    # a list of all the packages that should be installed
    #
    do_dist_upgrade=0
    for pkglist in $(ls $strict 2>/dev/null); do
        if grep -q "dist-upgrade" $pkglist >/dev/null 2>&1; then
            do_dist_upgrade=1
        fi
        apt-get install -y $(cat $pkglist|sed -e 's/dist-upgrade//g')
        if [ $? -ne 0 ]; then
            echo "E: Failed to install test packages. Exiting!"
            exit_job 3
        fi
    done

    [ $do_dist_upgrade -eq 1 ] && apt-get -y dist-upgrade

    # Install additional packages
    install_pkg

    echo "# List of packages installed after packages installation" > ${SYSINFODIR}/dpkg-l.postsetup
    dpkg -l >> ${SYSINFODIR}/dpkg-l.postsetup

    # Additional informations about the system
    uname -a > ${SYSINFODIR}/uname-a.log
    cat /proc/version_signature > ${SYSINFODIR}/version_signature.log
    lspci -vvnn > ${SYSINFODIR}/lspci-vvnn.log
    lsmod > ${SYSINFODIR}/lsmod

    if [ -d "/usr/local/share/otto/setup-hooks/" ]; then
         for hook in /usr/local/share/otto/setup-hooks/*; do
              [ -x "$hook" ] && $hook
         done
    fi

    exit_job 0
end script
